syntax = "proto3";
package penumbra.core.component.fee.v1;

import "penumbra/core/asset/v1/asset.proto";
import "penumbra/core/num/v1/num.proto";

// Specifies fees paid by a transaction.
message Fee {
  // The amount of the token used to pay fees.
  num.v1.Amount amount = 1;
  // If present, the asset ID of the token used to pay fees.
  // If absent, specifies the staking token implicitly.
  asset.v1.AssetId asset_id = 2;
}

// Gas usage for a transaction.
//
// Gas used is multiplied by `GasPrices` to determine a `Fee`.
message Gas {
  // The amount of block space used.
  uint64 block_space = 1;
  // The amount of compact block space used.
  uint64 compact_block_space = 2;
  // The amount of verification cost used.
  uint64 verification = 3;
  // The amount of execution cost used.
  uint64 execution = 4;
}

message GasPrices {
  // The asset ID of the fee token these prices are for.
  //
  // If absent, specifies the staking token implicitly.
  asset.v1.AssetId asset_id = 15;

  // The price per unit block space in terms of the staking token, with an implicit 1,000 denominator.
  uint64 block_space_price = 1;
  // The price per unit compact block space in terms of the staking token, with an implicit 1,000 denominator.
  uint64 compact_block_space_price = 2;
  // The price per unit verification cost in terms of the staking token, with an implicit 1,000 denominator.
  uint64 verification_price = 3;
  // The price per unit execution cost in terms of the staking token, with an implicit 1,000 denominator.
  uint64 execution_price = 4;
}

message FeeTier {
  // The tier for the fee.
  enum Tier {
    TIER_UNSPECIFIED = 0;
    TIER_LOW = 1;
    TIER_MEDIUM = 2;
    TIER_HIGH = 3;
  }

  // The selected fee tier.
  Tier fee_tier = 1;
}

// Fee component configuration data.
message FeeParameters {
  // Fixed gas prices in the native token used to compute transactions' base
  // fees.
  //
  // In the future, this should be removed and replaced with parameters for
  // dynamic gas pricing.
  GasPrices fixed_gas_prices = 1;

  // Fixed gas prices in other tokens used to compute transactions' base fees.
  //
  // In the future, this should be removed and replaced with fixed multiples of
  // the native token's price (so that there is one set of dynamically
  // determined gas prices in the native token, and derived gas prices in other
  // alternative tokens).
  //
  // If this is empty, no other tokens are accepted for gas.
  repeated GasPrices fixed_alt_gas_prices = 2;
}

// Fee-specific genesis content.
message GenesisContent {
  // The FeeParameters present at genesis.
  FeeParameters fee_params = 1;
}

// Query operations for the fee component.
service QueryService {
  // Get the current gas prices.
  rpc CurrentGasPrices(CurrentGasPricesRequest) returns (CurrentGasPricesResponse);
}

message CurrentGasPricesRequest {}

message CurrentGasPricesResponse {
  // The current gas prices, in the preferred (native) token.
  GasPrices gas_prices = 1;
  // Other gas prices for other accepted tokens.
  repeated GasPrices alt_gas_prices = 2;
}

// Emitted during fee payment.
message EventPaidFee {
  // The fee paid.
  Fee fee = 1;
  // The base fee that was required.
  Fee base_fee = 2;
  // The tip that was paid to the proposer.
  Fee tip = 3;
  // The gas used to compute the base fee.
  Gas gas_used = 4;
}

// Emitted as a summary of fees in the block.
message EventBlockFees {
  // The total fees, after swapping to the native token.
  Fee swapped_fee_total = 1;
  // The total base fees, after swapping to the native token.
  Fee swapped_base_fee_total = 2;
  // The total tips, after swapping to the native token.
  Fee swapped_tip_total = 3;
}